/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CallToAction = {
  _type: "callToAction";
  heading: string;
  text?: string;
  buttonText?: string;
  link?: Link;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "page" | "post";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  openInNewTab?: boolean;
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  heading: string;
  subheading?: string;
  pageBuilder?: Array<{
    _key: string;
  } & CallToAction | {
    _key: string;
  } & InfoSection>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  content?: BlockContent;
  excerpt?: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName: string;
  lastName: string;
  picture: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | CallToAction | Link | InfoSection | BlockContent | Page | Post | Person | Slug | Settings | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/certification-queries.ts
// Variable: allCertificationsQuery
// Query: *[_type == "certification"] | order(name asc) {    _id,    name,    "slug": slug.current,    description,    website,    category,    credibility,    "logo": logo {      asset->{        _id,        url      },      alt    },    "localizedContent": {      "en": localizedContent.en,      "fr": localizedContent.fr    }  }
export type AllCertificationsQueryResult = Array<never>;
// Variable: certificationBySlugQuery
// Query: *[_type == "certification" && slug.current == $slug][0] {    _id,    name,    "slug": slug.current,    description,    website,    category,    credibility,    "logo": logo {      asset->{        _id,        url      },      alt    },    "localizedContent": {      "en": localizedContent.en,      "fr": localizedContent.fr    },    "criteria": criteria[] {      name,      description,      "localizedContent": {        "en": localizedContent.en,        "fr": localizedContent.fr      }    }  }
export type CertificationBySlugQueryResult = null;
// Variable: certificationsByCategoryQuery
// Query: *[_type == "certification" && category == $category] | order(name asc) {    _id,    name,    "slug": slug.current,    description,    website,    category,    credibility,    "logo": logo {      asset->{        _id,        url      },      alt    },    "localizedContent": {      "en": localizedContent.en,      "fr": localizedContent.fr    }  }
export type CertificationsByCategoryQueryResult = Array<never>;

// Source: ./sanity/lib/metrics-queries.ts
// Variable: metricsPageQuery
// Query: *[_type == "metricsPage"][0] {    title,    description,    introduction,    "featuredMetrics": featuredMetrics[]-> {      _id,      name,      description,      "slug": slug.current,      "category": category-> {        name,        icon,        color      },      unit,      icon,      "benchmarks": benchmarks[] {        label,        value,        percentile,        color      }    },    "sections": sections[] {      title,      description,      layout,      backgroundColor,      "metrics": metrics[]-> {        _id,        name,        description,        "slug": slug.current,        "category": category-> {          name,          icon,          color        },        unit,        icon,        "benchmarks": benchmarks[] {          label,          value,          percentile,          color        }      }    },    metaTitle,    metaDescription  }
export type MetricsPageQueryResult = null;
// Variable: metricBySlugQuery
// Query: *[_type == "metric" && slug.current == $slug][0] {    _id,    name,    description,    "slug": slug.current,    "category": category-> {      name,      icon,      color,      "slug": slug.current    },    unit,    icon,    importance,    detailedDescription,    methodology,    impactExplanation,    dataSource,    "benchmarks": benchmarks[] {      label,      value,      percentile,      color    },    industryAverage,    bestPractice,    "relatedMetrics": relatedMetrics[]-> {      _id,      name,      description,      "slug": slug.current,      "category": category-> {        name,        icon,        color      },      unit,      icon    },    "relatedContent": relatedContent[]-> {      _id,      title,      "slug": slug.current,      excerpt,      "featuredImage": featuredImage    }  }
export type MetricBySlugQueryResult = null;
// Variable: metricQuery
// Query: *[_type == "metric" && slug.current == $slug][0] {    _id,    name,    description,    "slug": slug.current,    "category": category-> {      name,      icon,      color,      "slug": slug.current    },    unit,    icon,    what,    why,    howWeMeasure,    industryStats,    "benchmarks": benchmarks[] {      label,      value,      percentile,      color    },    consumerTips,    "relatedMetrics": relatedMetrics[]-> {      _id,      name,      description,      "slug": slug.current,      "category": category-> {        name,        icon,        color      },      unit,      icon    }  }
export type MetricQueryResult = null;
// Variable: metricPagesSlugs
// Query: *[_type == "metric"] {    'params': {      'metric': slug.current    }  }
export type MetricPagesSlugsResult = Array<never>;
// Variable: metricCategoriesQuery
// Query: *[_type == "metricCategory"] | order(name asc) {    _id,    name,    description,    "slug": slug.current,    icon,    color,    "metricsCount": count(*[_type == "metric" && references(^._id)])  }
export type MetricCategoriesQueryResult = Array<never>;
// Variable: featuredMetricsQuery
// Query: *[_type == "metric"] | order(importance desc) [0...4] {    _id,    name,    description,    "slug": slug.current,    "category": category-> {      name,      icon,      color    },    unit,    icon,    "benchmarks": benchmarks[] {      label,      value,      percentile,      color    }  }
export type FeaturedMetricsQueryResult = Array<never>;
// Variable: allMetricsQuery
// Query: *[_type == "metric"] | order(name asc) {    _id,    name,    description,    "slug": slug.current,    "category": category-> {      name,      icon,      color,      "slug": slug.current    },    unit,    icon,    importance  }
export type AllMetricsQueryResult = Array<never>;
// Variable: metricsByCategoryQuery
// Query: *[_type == "metric" && category._ref == $categoryId] | order(name asc) {    _id,    name,    description,    "slug": slug.current,    "category": category-> {      name,      icon,      color    },    unit,    icon,    "benchmarks": benchmarks[] {      label,      value,      percentile,      color    }  }
export type MetricsByCategoryQueryResult = Array<never>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"certification\"] | order(name asc) {\n    _id,\n    name,\n    \"slug\": slug.current,\n    description,\n    website,\n    category,\n    credibility,\n    \"logo\": logo {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    },\n    \"localizedContent\": {\n      \"en\": localizedContent.en,\n      \"fr\": localizedContent.fr\n    }\n  }\n": AllCertificationsQueryResult;
    "\n  *[_type == \"certification\" && slug.current == $slug][0] {\n    _id,\n    name,\n    \"slug\": slug.current,\n    description,\n    website,\n    category,\n    credibility,\n    \"logo\": logo {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    },\n    \"localizedContent\": {\n      \"en\": localizedContent.en,\n      \"fr\": localizedContent.fr\n    },\n    \"criteria\": criteria[] {\n      name,\n      description,\n      \"localizedContent\": {\n        \"en\": localizedContent.en,\n        \"fr\": localizedContent.fr\n      }\n    }\n  }\n": CertificationBySlugQueryResult;
    "\n  *[_type == \"certification\" && category == $category] | order(name asc) {\n    _id,\n    name,\n    \"slug\": slug.current,\n    description,\n    website,\n    category,\n    credibility,\n    \"logo\": logo {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    },\n    \"localizedContent\": {\n      \"en\": localizedContent.en,\n      \"fr\": localizedContent.fr\n    }\n  }\n": CertificationsByCategoryQueryResult;
    "\n  *[_type == \"metricsPage\"][0] {\n    title,\n    description,\n    introduction,\n    \"featuredMetrics\": featuredMetrics[]-> {\n      _id,\n      name,\n      description,\n      \"slug\": slug.current,\n      \"category\": category-> {\n        name,\n        icon,\n        color\n      },\n      unit,\n      icon,\n      \"benchmarks\": benchmarks[] {\n        label,\n        value,\n        percentile,\n        color\n      }\n    },\n    \"sections\": sections[] {\n      title,\n      description,\n      layout,\n      backgroundColor,\n      \"metrics\": metrics[]-> {\n        _id,\n        name,\n        description,\n        \"slug\": slug.current,\n        \"category\": category-> {\n          name,\n          icon,\n          color\n        },\n        unit,\n        icon,\n        \"benchmarks\": benchmarks[] {\n          label,\n          value,\n          percentile,\n          color\n        }\n      }\n    },\n    metaTitle,\n    metaDescription\n  }\n": MetricsPageQueryResult;
    "\n  *[_type == \"metric\" && slug.current == $slug][0] {\n    _id,\n    name,\n    description,\n    \"slug\": slug.current,\n    \"category\": category-> {\n      name,\n      icon,\n      color,\n      \"slug\": slug.current\n    },\n    unit,\n    icon,\n    importance,\n    detailedDescription,\n    methodology,\n    impactExplanation,\n    dataSource,\n    \"benchmarks\": benchmarks[] {\n      label,\n      value,\n      percentile,\n      color\n    },\n    industryAverage,\n    bestPractice,\n    \"relatedMetrics\": relatedMetrics[]-> {\n      _id,\n      name,\n      description,\n      \"slug\": slug.current,\n      \"category\": category-> {\n        name,\n        icon,\n        color\n      },\n      unit,\n      icon\n    },\n    \"relatedContent\": relatedContent[]-> {\n      _id,\n      title,\n      \"slug\": slug.current,\n      excerpt,\n      \"featuredImage\": featuredImage\n    }\n  }\n": MetricBySlugQueryResult;
    "\n  *[_type == \"metric\" && slug.current == $slug][0] {\n    _id,\n    name,\n    description,\n    \"slug\": slug.current,\n    \"category\": category-> {\n      name,\n      icon,\n      color,\n      \"slug\": slug.current\n    },\n    unit,\n    icon,\n    what,\n    why,\n    howWeMeasure,\n    industryStats,\n    \"benchmarks\": benchmarks[] {\n      label,\n      value,\n      percentile,\n      color\n    },\n    consumerTips,\n    \"relatedMetrics\": relatedMetrics[]-> {\n      _id,\n      name,\n      description,\n      \"slug\": slug.current,\n      \"category\": category-> {\n        name,\n        icon,\n        color\n      },\n      unit,\n      icon\n    }\n  }\n": MetricQueryResult;
    "\n  *[_type == \"metric\"] {\n    'params': {\n      'metric': slug.current\n    }\n  }\n": MetricPagesSlugsResult;
    "\n  *[_type == \"metricCategory\"] | order(name asc) {\n    _id,\n    name,\n    description,\n    \"slug\": slug.current,\n    icon,\n    color,\n    \"metricsCount\": count(*[_type == \"metric\" && references(^._id)])\n  }\n": MetricCategoriesQueryResult;
    "\n  *[_type == \"metric\"] | order(importance desc) [0...4] {\n    _id,\n    name,\n    description,\n    \"slug\": slug.current,\n    \"category\": category-> {\n      name,\n      icon,\n      color\n    },\n    unit,\n    icon,\n    \"benchmarks\": benchmarks[] {\n      label,\n      value,\n      percentile,\n      color\n    }\n  }\n": FeaturedMetricsQueryResult;
    "\n  *[_type == \"metric\"] | order(name asc) {\n    _id,\n    name,\n    description,\n    \"slug\": slug.current,\n    \"category\": category-> {\n      name,\n      icon,\n      color,\n      \"slug\": slug.current\n    },\n    unit,\n    icon,\n    importance\n  }\n": AllMetricsQueryResult;
    "\n  *[_type == \"metric\" && category._ref == $categoryId] | order(name asc) {\n    _id,\n    name,\n    description,\n    \"slug\": slug.current,\n    \"category\": category-> {\n      name,\n      icon,\n      color\n    },\n    unit,\n    icon,\n    \"benchmarks\": benchmarks[] {\n      label,\n      value,\n      percentile,\n      color\n    }\n  }\n": MetricsByCategoryQueryResult;
  }
}
